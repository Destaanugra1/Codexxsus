,---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import TemplateShowcaseCard from '~/components/ui/TemplateShowcaseCard.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  templates?: Array<{
    title: string;
    description: string;
    image: string;
    category?: string;
    callToAction?: {
      text: string;
      href: string;
      icon?: string;
      target?: string;
    };
  }>;
  columns?: number;
  id?: string;
  isDark?: boolean;
  classes?: Record<string, string>;
  bg?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  templates = [],
  columns = 4,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />

  {
    templates && templates.length > 0 && (
      <div
        class={`grid gap-6 ${
          columns === 4
            ? 'sm:grid-cols-2 lg:grid-cols-4'
            : columns === 3
              ? 'sm:grid-cols-2 lg:grid-cols-3'
              : columns === 2
                ? 'sm:grid-cols-2'
                : 'sm:grid-cols-1'
        }`}>
        {templates.map((template) => (
          <div class='intersect-once motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade'>
            <TemplateShowcaseCard {...template} />
          </div>
        ))}
      </div>
    )
  }
</WidgetWrapper>
