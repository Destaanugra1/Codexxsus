---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';
import Image from '../common/Image.astro';

export interface Props {
  title: string;
  description: string;
  image?: string;
  price?: string;
  discount?: string;
  rating?: number;
  features?: string[];
  callToAction?: {
    text: string;
    href: string;
    icon?: string;
    target?: string;
  };
  badge?: string;
  classes?: Record<string, string>;
}

const {
  title,
  description,
  image = '',
  price = '',
  discount = '',
  rating = 0,
  features = [],
  callToAction,
  badge = '',
  classes = {},
} = Astro.props;

const {
  container: containerClass = '',
  card: cardClass = '',
  image: imageClass = '',
  content: contentClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  price: priceClass = '',
  badge: badgeClass = '',
} = classes;
---

<div class={twMerge('relative w-full transition-all duration-300 group', containerClass)}>
  <div
    class={twMerge(
      'relative overflow-hidden rounded-xl shadow-lg bg-white dark:bg-slate-900 hover:shadow-xl transition-all duration-300 h-full',
      cardClass
    )}>
    {
      image && (
        <div class='relative overflow-hidden aspect-[4/3]'>
          <Image
            src={image}
            alt={title}
            class={twMerge(
              'object-cover w-full h-full transition-transform duration-500 group-hover:scale-105',
              imageClass
            )}
            width={400}
            height={300}
          />
          {badge && (
            <div
              class={twMerge(
                'absolute top-4 right-4 py-1 px-3 rounded-full text-xs font-semibold text-white bg-primary',
                badgeClass
              )}>
              {badge}
            </div>
          )}
        </div>
      )
    }
    <div class={twMerge('p-6', contentClass)}>
      {
        rating > 0 && (
          <div class='flex items-center mb-3'>
            {Array.from({ length: 5 }).map((_, index) => (
              <Icon
                name='tabler:star'
                class={`w-5 h-5 ${index < rating ? 'text-yellow-500' : 'text-gray-300 dark:text-gray-600'}`}
              />
            ))}
          </div>
        )
      }
      <h3 class={twMerge('text-xl font-bold mb-2', titleClass)}>{title}</h3>
      <p class={twMerge('text-muted mb-4', descriptionClass)}>{description}</p>

      {
        features.length > 0 && (
          <ul class='mb-5 space-y-2'>
            {features.map((feature) => (
              <li class='flex items-center'>
                <Icon name='tabler:check' class='w-5 h-5 text-primary mr-2' />
                <span class='text-muted'>{feature}</span>
              </li>
            ))}
          </ul>
        )
      }

      <div class='flex flex-wrap justify-between items-center mt-auto'>
        {
          price && (
            <div class='flex items-end mb-4 md:mb-0'>
              <span class={twMerge('text-xl font-bold', priceClass)}>{price}</span>
              {discount && <span class='text-sm text-muted line-through ml-2'>{discount}</span>}
            </div>
          )
        }

        {
          callToAction && (
            <Button variant='primary' {...callToAction} class='w-full md:w-auto'>
              {callToAction.icon && <Icon name={callToAction.icon} class='w-5 h-5 mr-1 -ml-1.5 rtl:-mr-1.5 rtl:ml-1' />}
              {callToAction.text}
            </Button>
          )
        }
      </div>
    </div>
  </div>
</div>
